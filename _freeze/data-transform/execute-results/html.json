{
  "hash": "3766af277fc4dca786e86c9a11934194",
  "result": {
    "markdown": "---\ntitle: \"Data transformation\"\n---\n\n\n\n\n## Prerequisites {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(nycflights13)\nlibrary(tidyverse)\n#> ── Attaching core tidyverse packages ───────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#> ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#> ✔ purrr     1.0.1     \n#> ── Conflicts ─────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n\n## 4.2.5 Exercises {.unnumbered}\n\n1.  Pipelines for each part are given below.\n\na.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  filter(arr_delay >= 120) |>\n  arrange(desc(arr_delay))\n#> # A tibble: 10,200 × 19\n#>    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n#>   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n#> 1  2013     1     9      641            900      1301     1242           1530\n#> 2  2013     6    15     1432           1935      1137     1607           2120\n#> 3  2013     1    10     1121           1635      1126     1239           1810\n#> 4  2013     9    20     1139           1845      1014     1457           2210\n#> 5  2013     7    22      845           1600      1005     1044           1815\n#> 6  2013     4    10     1100           1900       960     1342           2211\n#> # ℹ 10,194 more rows\n#> # ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>, …\n```\n:::\n\n\nb.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  filter(dest %in% c(\"IAH\", \"HOU\"))\n#> # A tibble: 9,313 × 19\n#>    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n#>   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n#> 1  2013     1     1      517            515         2      830            819\n#> 2  2013     1     1      533            529         4      850            830\n#> 3  2013     1     1      623            627        -4      933            932\n#> 4  2013     1     1      728            732        -4     1041           1038\n#> 5  2013     1     1      739            739         0     1104           1038\n#> 6  2013     1     1      908            908         0     1228           1219\n#> # ℹ 9,307 more rows\n#> # ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>, …\n```\n:::\n\n\nc.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  filter(carrier %in% c(\"UA\", \"DL\", \"AA\"))\n#> # A tibble: 139,504 × 19\n#>    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n#>   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n#> 1  2013     1     1      517            515         2      830            819\n#> 2  2013     1     1      533            529         4      850            830\n#> 3  2013     1     1      542            540         2      923            850\n#> 4  2013     1     1      554            600        -6      812            837\n#> 5  2013     1     1      554            558        -4      740            728\n#> 6  2013     1     1      558            600        -2      753            745\n#> # ℹ 139,498 more rows\n#> # ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>, …\n```\n:::\n\n\nd.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  filter(month %in% c(7, 8, 9))\n#> # A tibble: 86,326 × 19\n#>    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n#>   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n#> 1  2013     7     1        1           2029       212      236           2359\n#> 2  2013     7     1        2           2359         3      344            344\n#> 3  2013     7     1       29           2245       104      151              1\n#> 4  2013     7     1       43           2130       193      322             14\n#> 5  2013     7     1       44           2150       174      300            100\n#> 6  2013     7     1       46           2051       235      304           2358\n#> # ℹ 86,320 more rows\n#> # ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>, …\n```\n:::\n\n\ne.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  filter(arr_delay >= 120 & dep_delay <= 0) |> view()\n```\n:::\n\n\nf.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  filter(dep_delay >= 60 & dep_delay - arr_delay > 30)\n#> # A tibble: 1,844 × 19\n#>    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n#>   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n#> 1  2013     1     1     2205           1720       285       46           2040\n#> 2  2013     1     1     2326           2130       116      131             18\n#> 3  2013     1     3     1503           1221       162     1803           1555\n#> 4  2013     1     3     1839           1700        99     2056           1950\n#> 5  2013     1     3     1850           1745        65     2148           2120\n#> 6  2013     1     3     1941           1759       102     2246           2139\n#> # ℹ 1,838 more rows\n#> # ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>, …\n```\n:::\n\n\n2.  Flights with longest departure delays and, among those, flights that left earliest in the morning:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    flights |> \n      arrange(desc(dep_delay)) |> \n      arrange(sched_dep_time) |>\n      relocate(dep_delay, sched_dep_time)\n    #> # A tibble: 336,776 × 19\n    #>   dep_delay sched_dep_time  year month   day dep_time arr_time sched_arr_time\n    #>       <dbl>          <int> <int> <int> <int>    <int>    <int>          <int>\n    #> 1        NA            106  2013     7    27       NA       NA            245\n    #> 2       188            500  2013     4    24      808     1008            640\n    #> 3        61            500  2013     9    13      601      732            648\n    #> 4        47            500  2013     3     9      547      733            648\n    #> 5        44            500  2013     6     8      544      727            640\n    #> 6        29            500  2013     4    17      529      704            640\n    #> # ℹ 336,770 more rows\n    #> # ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>, …\n    ```\n    :::\n\n\n3.  Fastest flights, measured as miles per hour:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    flights |> \n      mutate(speed = distance / (air_time / 60)) |>\n      arrange(desc(speed)) |>\n      relocate(speed)\n    #> # A tibble: 336,776 × 20\n    #>   speed  year month   day dep_time sched_dep_time dep_delay arr_time\n    #>   <dbl> <int> <int> <int>    <int>          <int>     <dbl>    <int>\n    #> 1  703.  2013     5    25     1709           1700         9     1923\n    #> 2  650.  2013     7     2     1558           1513        45     1745\n    #> 3  648   2013     5    13     2040           2025        15     2225\n    #> 4  641.  2013     3    23     1914           1910         4     2045\n    #> 5  591.  2013     1    12     1559           1600        -1     1849\n    #> 6  564   2013    11    17      650            655        -5     1059\n    #> # ℹ 336,770 more rows\n    #> # ℹ 12 more variables: sched_arr_time <int>, arr_delay <dbl>, …\n    ```\n    :::\n\n\n4.  Yes, there was a flight on every day of 2013 since there are 365 distinct combinations of `year`, `month`, and `day`, which is equal to the number of days in the year 2013.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    flights |> \n      distinct(year, month, day) |>\n      nrow()\n    #> [1] 365\n    ```\n    :::\n\n\n5.  Flights that traveled the farthest distance:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    flights |> \n      arrange(desc(distance)) |>\n      relocate(distance)\n    #> # A tibble: 336,776 × 19\n    #>   distance  year month   day dep_time sched_dep_time dep_delay arr_time\n    #>      <dbl> <int> <int> <int>    <int>          <int>     <dbl>    <int>\n    #> 1     4983  2013     1     1      857            900        -3     1516\n    #> 2     4983  2013     1     2      909            900         9     1525\n    #> 3     4983  2013     1     3      914            900        14     1504\n    #> 4     4983  2013     1     4      900            900         0     1516\n    #> 5     4983  2013     1     5      858            900        -2     1519\n    #> 6     4983  2013     1     6     1019            900        79     1558\n    #> # ℹ 336,770 more rows\n    #> # ℹ 11 more variables: sched_arr_time <int>, arr_delay <dbl>, …\n    ```\n    :::\n\n\n    Flights that traveled the shortest distance\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    flights |> \n      arrange(distance) |>\n      relocate(distance)\n    #> # A tibble: 336,776 × 19\n    #>   distance  year month   day dep_time sched_dep_time dep_delay arr_time\n    #>      <dbl> <int> <int> <int>    <int>          <int>     <dbl>    <int>\n    #> 1       17  2013     7    27       NA            106        NA       NA\n    #> 2       80  2013     1     3     2127           2129        -2     2222\n    #> 3       80  2013     1     4     1240           1200        40     1333\n    #> 4       80  2013     1     4     1829           1615       134     1937\n    #> 5       80  2013     1     4     2128           2129        -1     2218\n    #> 6       80  2013     1     5     1155           1200        -5     1241\n    #> # ℹ 336,770 more rows\n    #> # ℹ 11 more variables: sched_arr_time <int>, arr_delay <dbl>, …\n    ```\n    :::\n\n\n6.  The order doesn't matter because we filter based on a condition, not based on row number.\n\n## 4.3.5 Exercises {.unnumbered}\n\n1.  I would expect `dep_time` to be `sched_dep_time + dep_delay`.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    flights |> \n      relocate(dep_time, sched_dep_time, dep_delay)\n    #> # A tibble: 336,776 × 19\n    #>   dep_time sched_dep_time dep_delay  year month   day arr_time sched_arr_time\n    #>      <int>          <int>     <dbl> <int> <int> <int>    <int>          <int>\n    #> 1      517            515         2  2013     1     1      830            819\n    #> 2      533            529         4  2013     1     1      850            830\n    #> 3      542            540         2  2013     1     1      923            850\n    #> 4      544            545        -1  2013     1     1     1004           1022\n    #> 5      554            600        -6  2013     1     1      812            837\n    #> 6      554            558        -4  2013     1     1      740            728\n    #> # ℹ 336,770 more rows\n    #> # ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>, …\n    ```\n    :::\n\n\n2.  The following are some of the ways these variables can be selected.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    flights |> \n      select(dep_time, dep_delay, arr_time, arr_delay)\n    #> # A tibble: 336,776 × 4\n    #>   dep_time dep_delay arr_time arr_delay\n    #>      <int>     <dbl>    <int>     <dbl>\n    #> 1      517         2      830        11\n    #> 2      533         4      850        20\n    #> 3      542         2      923        33\n    #> 4      544        -1     1004       -18\n    #> 5      554        -6      812       -25\n    #> 6      554        -4      740        12\n    #> # ℹ 336,770 more rows\n    \n    flights |> \n      select(starts_with(\"dep\"), starts_with(\"arr\"))\n    #> # A tibble: 336,776 × 4\n    #>   dep_time dep_delay arr_time arr_delay\n    #>      <int>     <dbl>    <int>     <dbl>\n    #> 1      517         2      830        11\n    #> 2      533         4      850        20\n    #> 3      542         2      923        33\n    #> 4      544        -1     1004       -18\n    #> 5      554        -6      812       -25\n    #> 6      554        -4      740        12\n    #> # ℹ 336,770 more rows\n    \n    flights |>\n      select(dep_time:arr_delay, -contains(\"sched\"))\n    #> # A tibble: 336,776 × 4\n    #>   dep_time dep_delay arr_time arr_delay\n    #>      <int>     <dbl>    <int>     <dbl>\n    #> 1      517         2      830        11\n    #> 2      533         4      850        20\n    #> 3      542         2      923        33\n    #> 4      544        -1     1004       -18\n    #> 5      554        -6      812       -25\n    #> 6      554        -4      740        12\n    #> # ℹ 336,770 more rows\n    ```\n    :::\n\n\n3.  You get the variable just once.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    flights |> \n      select(dep_time, dep_time)\n    #> # A tibble: 336,776 × 1\n    #>   dep_time\n    #>      <int>\n    #> 1      517\n    #> 2      533\n    #> 3      542\n    #> 4      544\n    #> 5      554\n    #> 6      554\n    #> # ℹ 336,770 more rows\n    ```\n    :::\n\n\n4.  You ask if `any_of()` these variables have a certain thing you are looking for.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    variables <- c(\"year\", \"month\", \"day\", \"dep_delay\", \"arr_delay\")\n    \n    flights |> \n      select(any_of(variables))\n    #> # A tibble: 336,776 × 5\n    #>    year month   day dep_delay arr_delay\n    #>   <int> <int> <int>     <dbl>     <dbl>\n    #> 1  2013     1     1         2        11\n    #> 2  2013     1     1         4        20\n    #> 3  2013     1     1         2        33\n    #> 4  2013     1     1        -1       -18\n    #> 5  2013     1     1        -6       -25\n    #> 6  2013     1     1        -4        12\n    #> # ℹ 336,770 more rows\n    ```\n    :::\n\n\n5.  Yes, it does surprise me since the variable names are lowercase but the string in `contains()` is uppercase. By default, `contains()` ignores case.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    flights |> \n      select(contains(\"TIME\"))\n    #> # A tibble: 336,776 × 6\n    #>   dep_time sched_dep_time arr_time sched_arr_time air_time\n    #>      <int>          <int>    <int>          <int>    <dbl>\n    #> 1      517            515      830            819      227\n    #> 2      533            529      850            830      227\n    #> 3      542            540      923            850      160\n    #> 4      544            545     1004           1022      183\n    #> 5      554            600      812            837      116\n    #> 6      554            558      740            728      150\n    #> # ℹ 336,770 more rows\n    #> # ℹ 1 more variable: time_hour <dttm>\n    ```\n    :::\n\n    \n    To change this default behavior, set `ignore.case = FALSE`.\n    \n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    flights |> \n      select(contains(\"TIME\", ignore.case = FALSE))\n    #> # A tibble: 336,776 × 0\n    ```\n    :::\n\n\n6.  Below we rename `air_time` to `air_time_min` and move it to the beginning of the data frame.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    flights |>\n      rename(air_time_min = air_time) |>\n      relocate(air_time_min)\n    #> # A tibble: 336,776 × 19\n    #>   air_time_min  year month   day dep_time sched_dep_time dep_delay arr_time\n    #>          <dbl> <int> <int> <int>    <int>          <int>     <dbl>    <int>\n    #> 1          227  2013     1     1      517            515         2      830\n    #> 2          227  2013     1     1      533            529         4      850\n    #> 3          160  2013     1     1      542            540         2      923\n    #> 4          183  2013     1     1      544            545        -1     1004\n    #> 5          116  2013     1     1      554            600        -6      812\n    #> 6          150  2013     1     1      554            558        -4      740\n    #> # ℹ 336,770 more rows\n    #> # ℹ 11 more variables: sched_arr_time <int>, arr_delay <dbl>, …\n    ```\n    :::\n\n\n7.  This doesn't work because the result of the `select()` step is a data frame with only the `tailnum` variable, so it's not possible to arrange it by another variable, `arr_delay`.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    flights |> \n      select(tailnum) |> \n      arrange(arr_delay)\n    #> Error in `arrange()`:\n    #> ℹ In argument: `..1 = arr_delay`.\n    #> Caused by error:\n    #> ! object 'arr_delay' not found\n    ```\n    :::\n\n\n## 4.5.7 Exercises {.unnumbered}\n\n1.  F9 (Frontier Airlines) has the worst average delays.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    flights |>\n      group_by(carrier) |>\n      summarize(avg_dep_delay = mean(dep_delay, na.rm = TRUE)) |>\n      arrange(desc(avg_dep_delay))\n    #> # A tibble: 16 × 2\n    #>   carrier avg_dep_delay\n    #>   <chr>           <dbl>\n    #> 1 F9               20.2\n    #> 2 EV               20.0\n    #> 3 YV               19.0\n    #> 4 FL               18.7\n    #> 5 WN               17.7\n    #> 6 9E               16.7\n    #> # ℹ 10 more rows\n    ```\n    :::\n\n\n2.  The following are the top 5 most departure delayed flights from each destination.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    flights |> \n      group_by(dest) |> \n      arrange(dest, desc(dep_delay)) |>\n      slice_head(n = 5) |>\n      relocate(dest, dep_delay)\n    #> # A tibble: 517 × 19\n    #> # Groups:   dest [105]\n    #>   dest  dep_delay  year month   day dep_time sched_dep_time arr_time\n    #>   <chr>     <dbl> <int> <int> <int>    <int>          <int>    <int>\n    #> 1 ABQ         142  2013    12    14     2223           2001      133\n    #> 2 ABQ         139  2013    12    17     2220           2001      120\n    #> 3 ABQ         125  2013     7    30     2212           2007       57\n    #> 4 ABQ         125  2013     9     2     2212           2007       48\n    #> 5 ABQ         119  2013     7    23     2206           2007      116\n    #> 6 ACK         219  2013     7    23     1139            800     1250\n    #> # ℹ 511 more rows\n    #> # ℹ 11 more variables: sched_arr_time <int>, arr_delay <dbl>, …\n    ```\n    :::\n\n\n3.  Over the course of the day, hourly average departure delay increases until about 7pm, and then declines again, however doesn't go as low as the beginning of the day.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    flights |>\n      group_by(hour) |>\n      summarize(avg_dep_delay = mean(dep_delay, na.rm = TRUE)) |>\n      ggplot(aes(x = hour, y = avg_dep_delay)) + \n      geom_smooth()\n    #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n    #> Warning: Removed 1 rows containing non-finite values (`stat_smooth()`).\n    ```\n    \n    ::: {.cell-output-display}\n    ![](data-transform_files/figure-html/unnamed-chunk-24-1.png){width=576}\n    :::\n    :::\n\n\n4.  Supplying a negative value arranges the data frame in either ascending (with `slice_min()`) or descending (with `slice_max()`) order, but it doesn't actually slice the data frame for the lowest/highest values of the given variable.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    flights |> \n      slice_min(dep_delay, n = -5) |>\n      relocate(dep_delay)\n    #> # A tibble: 336,776 × 19\n    #>   dep_delay  year month   day dep_time sched_dep_time arr_time sched_arr_time\n    #>       <dbl> <int> <int> <int>    <int>          <int>    <int>          <int>\n    #> 1       -43  2013    12     7     2040           2123       40           2352\n    #> 2       -33  2013     2     3     2022           2055     2240           2338\n    #> 3       -32  2013    11    10     1408           1440     1549           1559\n    #> 4       -30  2013     1    11     1900           1930     2233           2243\n    #> 5       -27  2013     1    29     1703           1730     1947           1957\n    #> 6       -26  2013     8     9      729            755     1002            955\n    #> # ℹ 336,770 more rows\n    #> # ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>, …\n    \n    flights |> \n      slice_min(dep_delay, n = 5) |>\n      relocate(dep_delay)\n    #> # A tibble: 5 × 19\n    #>   dep_delay  year month   day dep_time sched_dep_time arr_time sched_arr_time\n    #>       <dbl> <int> <int> <int>    <int>          <int>    <int>          <int>\n    #> 1       -43  2013    12     7     2040           2123       40           2352\n    #> 2       -33  2013     2     3     2022           2055     2240           2338\n    #> 3       -32  2013    11    10     1408           1440     1549           1559\n    #> 4       -30  2013     1    11     1900           1930     2233           2243\n    #> 5       -27  2013     1    29     1703           1730     1947           1957\n    #> # ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n    #> #   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, …\n    \n    flights |> \n      slice_max(dep_delay, n = -5) |>\n      relocate(dep_delay)\n    #> # A tibble: 336,776 × 19\n    #>   dep_delay  year month   day dep_time sched_dep_time arr_time sched_arr_time\n    #>       <dbl> <int> <int> <int>    <int>          <int>    <int>          <int>\n    #> 1      1301  2013     1     9      641            900     1242           1530\n    #> 2      1137  2013     6    15     1432           1935     1607           2120\n    #> 3      1126  2013     1    10     1121           1635     1239           1810\n    #> 4      1014  2013     9    20     1139           1845     1457           2210\n    #> 5      1005  2013     7    22      845           1600     1044           1815\n    #> 6       960  2013     4    10     1100           1900     1342           2211\n    #> # ℹ 336,770 more rows\n    #> # ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>, …\n    \n    flights |> \n      slice_max(dep_delay, n = 5) |>\n      relocate(dep_delay)\n    #> # A tibble: 5 × 19\n    #>   dep_delay  year month   day dep_time sched_dep_time arr_time sched_arr_time\n    #>       <dbl> <int> <int> <int>    <int>          <int>    <int>          <int>\n    #> 1      1301  2013     1     9      641            900     1242           1530\n    #> 2      1137  2013     6    15     1432           1935     1607           2120\n    #> 3      1126  2013     1    10     1121           1635     1239           1810\n    #> 4      1014  2013     9    20     1139           1845     1457           2210\n    #> 5      1005  2013     7    22      845           1600     1044           1815\n    #> # ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n    #> #   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, …\n    ```\n    :::\n\n\n5.  `count()` counts the number of observations in each group, setting the `sort` argument to `TRUE` arranges the categories in descending order of number of observations.\n\n6.  First, let's define the data frame `df`.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df <- tibble(\n      x = 1:5,\n      y = c(\"a\", \"b\", \"a\", \"a\", \"b\"),\n      z = c(\"K\", \"K\", \"L\", \"L\", \"K\")\n    )\n    ```\n    :::\n\n\na.  The following groups `df` by `y`.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df |>\n      group_by(y)\n    #> # A tibble: 5 × 3\n    #> # Groups:   y [2]\n    #>       x y     z    \n    #>   <int> <chr> <chr>\n    #> 1     1 a     K    \n    #> 2     2 b     K    \n    #> 3     3 a     L    \n    #> 4     4 a     L    \n    #> 5     5 b     K\n    ```\n    :::\n\n\nb.  The following arranges `df` in ascending order of the value of `y`.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df |>\n      arrange(y)\n    #> # A tibble: 5 × 3\n    #>       x y     z    \n    #>   <int> <chr> <chr>\n    #> 1     1 a     K    \n    #> 2     3 a     L    \n    #> 3     4 a     L    \n    #> 4     2 b     K    \n    #> 5     5 b     K\n    ```\n    :::\n\n\nc.  The following groups `df` by `y` and then calculates the average value of `x` for each group.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df |>\n      group_by(y) |>\n      summarize(mean_x = mean(x))\n    #> # A tibble: 2 × 2\n    #>   y     mean_x\n    #>   <chr>  <dbl>\n    #> 1 a       2.67\n    #> 2 b       3.5\n    ```\n    :::\n\n\nd.  The following groups `df` by `y` and `z`, and then calculates the average value of `x` for each group combination. The resulting data frame is grouped by `y`.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df |>\n      group_by(y, z) |>\n      summarize(mean_x = mean(x))\n    #> `summarise()` has grouped output by 'y'. You can override using the\n    #> `.groups` argument.\n    #> # A tibble: 3 × 3\n    #> # Groups:   y [2]\n    #>   y     z     mean_x\n    #>   <chr> <chr>  <dbl>\n    #> 1 a     K        1  \n    #> 2 a     L        3.5\n    #> 3 b     K        3.5\n    ```\n    :::\n\n\ne.  The following groups `df` by `y` and `z`, and then calculates the average value of `x` for each group combination. The resulting data frame is not grouped.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df |>\n      group_by(y, z) |>\n      summarize(mean_x = mean(x), .groups = \"drop\")\n    #> # A tibble: 3 × 3\n    #>   y     z     mean_x\n    #>   <chr> <chr>  <dbl>\n    #> 1 a     K        1  \n    #> 2 a     L        3.5\n    #> 3 b     K        3.5\n    ```\n    :::\n\n\nf.  Each of the following groups `df` by `y` and `z`, and then calculates the average value of `x` for each group combination. With `summarize()` the resulting data frame has one row per group combination while with `mutate()` the resulting data frame has the same number of rows as the original data frame.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    df |>\n      group_by(y, z) |>\n      summarize(mean_x = mean(x))\n    #> `summarise()` has grouped output by 'y'. You can override using the\n    #> `.groups` argument.\n    #> # A tibble: 3 × 3\n    #> # Groups:   y [2]\n    #>   y     z     mean_x\n    #>   <chr> <chr>  <dbl>\n    #> 1 a     K        1  \n    #> 2 a     L        3.5\n    #> 3 b     K        3.5\n    \n    df |>\n      group_by(y, z) |>\n      mutate(mean_x = mean(x))\n    #> # A tibble: 5 × 4\n    #> # Groups:   y, z [3]\n    #>       x y     z     mean_x\n    #>   <int> <chr> <chr>  <dbl>\n    #> 1     1 a     K        1  \n    #> 2     2 b     K        3.5\n    #> 3     3 a     L        3.5\n    #> 4     4 a     L        3.5\n    #> 5     5 b     K        3.5\n    ```\n    :::\n",
    "supporting": [
      "data-transform_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}