---
title: "Layers"
---

## Solutions

## Exercise 11.2.1

1.  

```{r}
ggplot(data = mpg,aes(x = hwy, y = displ)) +
  geom_point(color = "pink", shape = 17)
```

2.  The aes should be in the ggplot and you should also seperate the color aes into the geom like i did below,also the first code i believe thinks your trying to call a variable for color.

```{r}
ggplot(mpg) + 
  geom_point(aes(x = displ, y = hwy,color = "blue"))
```

```{r}
#fixed version
ggplot(data = mpg,aes(x = displ, y = hwy)) +
  geom_point(color = "blue")
```

3.  Stroke controls the size of the edge/border of the points for shapes 21-24.

4.  For that specific code part it seperates the points into true and false,But if you are talking about using that part or anything thats not a known variable you get a error.

```{r}
ggplot(mpg,aes(x = hwy, y = displ, color = displ < 5)) + geom_point()
```

## Exercise 11.3.1

1.  You would use geom_smooth or geom_area.

2.  It takes away the legend on the side,if you remove it,it will show the legend.

3.  It displays the confidence interval around the line on the chart,also if you use se = false it takes away the display around the line.

4.  

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point() +
  geom_smooth(se = FALSE)
```

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point() + 
  geom_smooth(se = FALSE,aes(shape = drv))
```

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = drv)) + 
  geom_smooth(se = FALSE,aes(shape = drv,color = drv))
```

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = drv)) + 
  geom_smooth(se = FALSE,aes(shape = drv, linetype = drv))
```

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(shape = "circle open", color = drv))
```

## Exercise 11.4.1

1.  This is what google says:

**You'll get one row or column for each unique value of the variable.**

2.  Having no data in a plot means there was no data to show.

```{r}
ggplot(mpg) + 
  geom_point(aes(x = drv, y = cyl)) +
  facet_grid(drv ~ cyl)
```

3.  The period means "everything", another way of saying don't facet across columns because we're not diving up the data by a variable's levels across columns. And in the second case it's across rows.

```{r}
ggplot(mpg) + 
  geom_point(aes(x = displ, y = hwy)) +
  facet_grid(drv ~ .)

ggplot(mpg) + 
  geom_point(aes(x = displ, y = hwy)) +
  facet_grid(. ~ cyl)
```

4.  The advantages of faceting is seeing each subgroup apart from each other to see more clearly. the disadvantages are not seeing the data overlap with each other.im pretty sure they'll just be more points.

5.  You can choose the number of rows and cols with nrow and ncol,like dir controls whether the panels are horizontal or vertical.Because facet grid goes off of the catagorical variable levels.

6.  The second plot makes it easier,use which ever suits best.

```{r}
ggplot(mpg) + 
  geom_point(aes(x = displ, y = hwy)) + 
  facet_grid(drv ~ .)

ggplot(mpg) + 
  geom_point(aes(x = displ, y = hwy)) + 
  facet_grid(. ~ drv)
```

7.  Facet grid chose to use rows instead of columns in the first code.

```{r}
ggplot(mpg) + 
  geom_point(aes(x = displ, y = hwy)) +
  facet_grid(drv ~ .)
```

```{r}
ggplot(mpg) + 
  geom_point(aes(x = displ, y = hwy)) +
  facet_wrap( ~ drv)
```

## Exercise 11.5.1

1.  The default geom of stat summary is geom_pointrange.

```{r}
diamonds |>
  group_by(cut) |>
  summarize(
    lower = min(depth),
    upper = max(depth),
    midpoint = median(depth)
  ) |>
  ggplot(aes(x = cut, y = midpoint)) +
  geom_pointrange(aes(ymin = lower, ymax = upper))
```

2.  Type ?g eom_col tells you in the description,geom_bar makes the height of the bar proportional to the number of cases in each group while geom_col,"If you want the heights of the bars to represent values in the data, use `geom_col()`".

3.  A lot of the geoms use stat = identity and some use bin and count.

4.  stat_smooth () provides the following variables, some of which depend on the orientation: **y or x predicted value**

5.  These graphs don't show any information.

```{r}
ggplot(diamonds, aes(x = cut, y = after_stat(prop))) + 
  geom_bar()
ggplot(diamonds, aes(x = cut, fill = color, y = after_stat(prop))) + 
  geom_bar()
```

I think i fixed them.

```{r}
ggplot(diamonds, aes(x = cut)) + 
  geom_bar()

ggplot(diamonds, aes(x = cut, fill = color)) + 
  geom_bar()
```

## Exercise 11.6.1

1.  

```{r}
ggplot(mpg, aes(x = cty, y = hwy)) + 
  geom_point()
```

2.  To adjust the amount of jittering along the x and y axes, one can explicitly set the position adjustment: geom_jitter **(data= d, mapping = aes (x =system, y = runtime), size =1, position = position_jitter (width =0.3, height =0)).**

3.  They both makes it easier to map out discrete data and helps show overlapping data for plots.

4.  the default is dodge2

```{r}
ggplot(data = mpg, aes(x = cty, y = displ)) +
  geom_boxplot(position = "dodge2")
```

## Exercise 11.7.1

1.  

```{r}
ggplot(diamonds, aes(x = cut, fill = clarity)) + 
  geom_bar(position = "fill")  + coord_polar()
```

2.  Coord quick map sets the aspect ratio correctly for maps while coord map projects a portion of the earth onto a 2d plane so i think coord quick map is like for exact coordinates and coord map is for a bigger representation i think.

3.  

```{r}
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
  geom_point() + 
  geom_abline() +
  coord_fixed()
```

This plot shows the more city miles per gallon the higher the highway mile per gallon goes,i believe coord fixed makes the plot like taller to show the information better,`geom_abline` shows the same information only on a solid line.
